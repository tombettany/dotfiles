set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.

" Syntastic
" Plugin 'scrooloose/syntastic'
" let g:syntastic_cpp_checkers = ['cppcheck', 'cppclean', 'cpplint',  'gcc']
" " let g:syntastic_cpp_checkers = ['verapp']
" let g:syntastic_c_checkers = ['cppcheck', 'cppclean', 'cpplint', 'splint',  'gcc']
" let g:syntastic_cpp_cpplint_exec = 'cpplint'
" let g:syntastic_sh_checkers = ['bashate', 'sh']

" Neomake - tool to run jobs automatically in the background
Plugin 'neomake/neomake'

" Tagbar
" requires exuberant-ctags
Plugin 'majutsushi/tagbar'

if v:version > 800
    " Try CoC
    Plugin 'neoclide/coc.nvim'

    " if hidden is not set, TextEdit might fail.
    set hidden

    " Some servers have issues with backup files, see #649
    set nobackup
    set nowritebackup

    " Better display for messages
    set cmdheight=2

    " You will have bad experience for diagnostic messages when it's default 4000.
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    " Or use `complete_info` if your vim support it, like:
    " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Create mappings for function text object, requires document symbols feature of languageserver.
    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)

    " Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
    nmap <silent> <C-d> <Plug>(coc-range-select)
    xmap <silent> <C-d> <Plug>(coc-range-select)

    " Use `:Format` to format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " use `:OR` for organize import of current buffer
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add status line support, for integration with other plugin, checkout `:h coc-status`
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
elseif v:version > 703
    " YouCompleteMe
    " Only supported from v7.3.598
    " After updating, it is likely that it will need recompiling:
    "     ~/.vim/bundle/YouCompleteMe/install.py
    Plugin 'Valloric/YouCompleteMe'
    " Disable YCM diagnostics UI so that C checkers are activated
    let g:ycm_show_diagnostics_ui = 0
    " YouCompleteMe compile flags generator
    Plugin 'rdnetto/YCM-Generator'
else
    " SuperTab
    Plugin 'vim-scripts/supertab'
endif
" Switch between c source and headers
Plugin 'vim-scripts/a.vim'
" Line diff
Plugin 'AndrewRadev/linediff.vim'
" Tab merge
Plugin 'vim-scripts/Tabmerge'
" Markdown previewer
Plugin 'suan/vim-instant-markdown'
" Provide jade syntax highlighting
Plugin 'digitaltoad/vim-jade'
" Provide stylus syntax highlighting
Plugin 'wavded/vim-stylus'
" Git plugin
Plugin 'tpope/vim-fugitive'
" Surround
Plugin 'tpope/vim-surround'
" Sessioning
Plugin 'tpope/vim-obsession'
" Consistent configurations between editors
Plugin 'editorconfig/editorconfig-vim'
" Typescript syntax
Plugin 'leafgarland/typescript-vim'
" Async!
Plugin 'tpope/vim-dispatch'
" Git status
Plugin 'airblade/vim-gitgutter'
" 'Safe' environment for editing code blocks
Plugin 'ferranpm/vim-isolate'
" DBMS interface
" Plugin 'cosminadrianpopescu/vim-sql-workbench'
" Fuzzy finder
Plugin 'kien/ctrlp.vim'
" Silver searcher
Plugin 'rking/ag.vim'
" QML Syntax Highlighting
Plugin 'peterhoeg/vim-qml'
" Puppet syntax highlighting
Plugin 'rodjek/vim-puppet'
" Rust syntax highlighting
Plugin 'rust-lang/rust.vim'
" Svelte syntax highlighting
Plugin 'evanleck/vim-svelte'
" Netrw enhancement
Plugin 'tpope/vim-vinegar'
" GraphQL syntax highlighting
Plugin 'jparise/vim-graphql'
" Open Policy Agent (OPA) Rego syntax highlighting
Plugin 'tsandall/vim-rego'
" Go syntax
Plugin 'fatih/vim-go'
" Terraform syntax
Plugin 'hashivim/vim-terraform'
" LaTeX syntax
Plugin 'lervag/vimtex'
" LaTeX fold tools
Plugin 'matze/vim-tex-fold'
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
if v:version < 800
    " Not compatible with CoC

    " Snippets engine
    Plugin 'SirVer/ultisnips'
    " Snippets are separated from the engine
    Plugin 'honza/vim-snippets'
endif


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" .vimrc
set showmode
set showcmd
set title
set number
set mouse=a
set backspace=2
set showmatch
set ruler

set tabpagemax=100
set expandtab
set tabstop=4
set shiftwidth=4
set smarttab
set softtabstop=4
set shiftround
set autoindent
set smartindent
set hlsearch

set splitright
set splitbelow

set colorcolumn=80

set spelllang=en_gb
autocmd FileType tex,bib,plaintex,markdown set spell

autocmd FileType c,h,cpp,hpp,cc setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType ruby setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Prevent tabexpand in Makefiles
au BufNewFile,BufRead Makefile set noexpandtab

"highlight WhitespaceEOL ctermbg=yellow guibg=red
"match WhitespaceEOL /\s\+$/
"autocmd ColorScheme * highlight WhitespaceEOL ctermbg=red guibg=red

highlight ExtraWhitespace ctermbg=red guibg=red
augroup extra_whitespace
    autocmd!
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
augroup END

syntax on
let &t_Co=256
colorscheme jellybeans

" Use x11 clipboard
if has('xterm_clipboard')
    if version >= 730
        set clipboard=unnamedplus
    else
        noremap Y "+Y
        noremap y "+y
        noremap yy "+yy
        noremap c "+c
        noremap C "+C
        noremap d "+d
        nnoremap dd "+dd
        noremap p "+p
        noremap P "+P
        noremap r "+r
        noremap R "+R
        noremap c "+c
        noremap C "+C
        noremap cc "+cc
    endif
endif

" Disable arrows
noremap <left> <nop>
noremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>

let mapleader = "-"

" $VIMRC Editing
nnoremap <leader>ev :tabnew $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Compile and run a Qt app
nnoremap <leader>rqt :!qmake && make && open ./*.app<cr>

" Pretty-print file as JSON
nnoremap <leader>fj :%!python -m json.tool<cr>

" Reload the source when writing to $MYVIMRC
augroup reload_source
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

augroup load_session
    autocmd!
    " autocmd SessionLoadPost * :Obsession
augroup END

call neomake#configure#automake('wni')
" let g:neomake_verbose=3
" let g:neomake_logfile='/tmp/error.log'
let g:neomake_python_enabled_makers = ['pylint', 'flake8', 'mypy']


" g:neomake: {
"     'automake': {
"         'ignore_filetypes': [
"             'startify',
"         ],
"         'events': {
"             'TextChangedI': {},
"             'BufWritePost': {
"             'delay': 0,
"             },
"             'TextChanged': {},
"         },
"     },
" }
" b:neomake: unset

let g:neomake_cpp_enabled_makers = ['cpplint']

let g:vimtex_compiler_method = 'tectonic'
